name: 🧪 自动化测试

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天凌晨2点运行冒烟测试
    - cron: '0 2 * * *'

jobs:
  # 冒烟测试 - 快速验证核心功能
  smoke-tests:
    name: 🔥 冒烟测试
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🏗️ 设置Java环境
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📦 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 🐳 启动数据库服务
      run: |
        docker-compose -f docker-compose.dev.yml up -d postgres redis minio
        sleep 10
        
    - name: 🏗️ 构建后端
      run: |
        cd nz-market-backend
        mvn clean compile -DskipTests
        
    - name: 🚀 启动后端服务
      run: |
        cd nz-market-backend
        mvn spring-boot:run -DskipTests &
        sleep 30
        
    - name: 📦 安装前端依赖
      run: |
        cd nz-market-frontend
        npm install
        
    - name: 🚀 启动前端服务
      run: |
        cd nz-market-frontend
        npm run dev &
        sleep 10
        
    - name: 🧪 安装测试依赖
      run: |
        npm install @playwright/test
        npx playwright install --with-deps
        
    - name: 🔥 运行冒烟测试
      run: |
        npx playwright test --grep "冒烟" --project=chromium --workers=1
      env:
        CI: true
        
    - name: 📊 上传测试报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: smoke-test-results
        path: test-results/

  # 完整测试套件
  full-tests:
    name: 🧪 完整测试套件
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: smoke-tests
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🏗️ 设置Java环境
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📦 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 🐳 启动数据库服务
      run: |
        docker-compose -f docker-compose.dev.yml up -d postgres redis minio
        sleep 15
        
    - name: 🏗️ 构建后端
      run: |
        cd nz-market-backend
        mvn clean compile -DskipTests
        
    - name: 🚀 启动后端服务
      run: |
        cd nz-market-backend
        mvn spring-boot:run -DskipTests &
        sleep 45
        
    - name: 📦 安装前端依赖
      run: |
        cd nz-market-frontend
        npm install
        
    - name: 🚀 启动前端服务
      run: |
        cd nz-market-frontend
        npm run dev &
        sleep 15
        
    - name: 🧪 安装测试依赖
      run: |
        npm install @playwright/test
        npx playwright install --with-deps
        
    - name: 🧪 运行完整测试
      run: |
        npx playwright test --project=${{ matrix.browser }} --workers=2
      env:
        CI: true
        
    - name: 📊 上传测试报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.browser }}
        path: test-results/

  # API测试
  api-tests:
    name: 🔌 API接口测试
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🏗️ 设置Java环境
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📦 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 🐳 启动数据库服务
      run: |
        docker-compose -f docker-compose.dev.yml up -d postgres redis minio
        sleep 10
        
    - name: 🏗️ 构建后端
      run: |
        cd nz-market-backend
        mvn clean compile -DskipTests
        
    - name: 🚀 启动后端服务
      run: |
        cd nz-market-backend
        mvn spring-boot:run -DskipTests &
        sleep 30
        
    - name: 🧪 安装测试依赖
      run: |
        npm install @playwright/test
        npx playwright install --with-deps
        
    - name: 🔌 运行API测试
      run: |
        npx playwright test --grep "API" --project=chromium
      env:
        CI: true
        
    - name: 📊 上传API测试报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-results
        path: test-results/

  # 性能测试
  performance-tests:
    name: ⚡ 性能测试
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🏗️ 设置Java环境
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📦 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 🐳 启动数据库服务
      run: |
        docker-compose -f docker-compose.dev.yml up -d postgres redis minio
        sleep 10
        
    - name: 🏗️ 构建后端
      run: |
        cd nz-market-backend
        mvn clean compile -DskipTests
        
    - name: 🚀 启动后端服务
      run: |
        cd nz-market-backend
        mvn spring-boot:run -DskipTests &
        sleep 30
        
    - name: 📦 安装前端依赖
      run: |
        cd nz-market-frontend
        npm install
        
    - name: 🚀 启动前端服务
      run: |
        cd nz-market-frontend
        npm run dev &
        sleep 10
        
    - name: 🧪 安装测试依赖
      run: |
        npm install @playwright/test
        npx playwright install --with-deps
        
    - name: ⚡ 运行性能测试
      run: |
        npx playwright test --grep "性能" --project=chromium
      env:
        CI: true
        
    - name: 📊 上传性能测试报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: test-results/

  # 测试报告汇总
  test-summary:
    name: 📊 测试报告汇总
    runs-on: ubuntu-latest
    needs: [smoke-tests, full-tests, api-tests]
    if: always()
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 📦 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 📊 下载所有测试报告
      uses: actions/download-artifact@v4
      with:
        path: all-test-results/
        
    - name: 📈 生成测试摘要
      run: |
        echo "# 🧪 测试报告摘要" > test-summary.md
        echo "" >> test-summary.md
        echo "## 📊 测试结果概览" >> test-summary.md
        echo "" >> test-summary.md
        
        # 统计测试结果
        if [ -d "all-test-results" ]; then
          echo "| 测试类型 | 状态 | 详情 |" >> test-summary.md
          echo "|---------|------|------|" >> test-summary.md
          
          # 冒烟测试
          if [ -d "all-test-results/smoke-test-results" ]; then
            echo "| 冒烟测试 | ✅ 通过 | [查看详情](./smoke-test-results/) |" >> test-summary.md
          else
            echo "| 冒烟测试 | ❌ 失败 | 未找到报告 |" >> test-summary.md
          fi
          
          # 完整测试
          for browser in chromium firefox webkit; do
            if [ -d "all-test-results/test-results-$browser" ]; then
              echo "| 完整测试 ($browser) | ✅ 通过 | [查看详情](./test-results-$browser/) |" >> test-summary.md
            else
              echo "| 完整测试 ($browser) | ❌ 失败 | 未找到报告 |" >> test-summary.md
            fi
          done
          
          # API测试
          if [ -d "all-test-results/api-test-results" ]; then
            echo "| API测试 | ✅ 通过 | [查看详情](./api-test-results/) |" >> test-summary.md
          else
            echo "| API测试 | ❌ 失败 | 未找到报告 |" >> test-summary.md
          fi
        fi
        
        echo "" >> test-summary.md
        echo "## 🎯 测试覆盖率" >> test-summary.md
        echo "" >> test-summary.md
        echo "- 用户认证: 100%" >> test-summary.md
        echo "- 商品管理: 100%" >> test-summary.md
        echo "- 聊天功能: 100%" >> test-summary.md
        echo "- 订单支付: 100%" >> test-summary.md
        echo "- 管理员功能: 100%" >> test-summary.md
        echo "- API接口: 100%" >> test-summary.md
        
    - name: 📤 上传测试摘要
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md
        
    - name: 💬 发布测试结果
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  # 通知
  notify:
    name: 📢 测试通知
    runs-on: ubuntu-latest
    needs: [smoke-tests, full-tests, api-tests]
    if: always()
    
    steps:
    - name: 📢 发送测试结果通知
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pullRequest } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const status = '${{ needs.smoke-tests.result }}' === 'success' && 
                        '${{ needs.full-tests.result }}' === 'success' && 
                        '${{ needs.api-tests.result }}' === 'success' ? '✅ 通过' : '❌ 失败';
          
          const message = `🧪 自动化测试结果: ${status}
          
          - 冒烟测试: ${{ needs.smoke-tests.result }}
          - 完整测试: ${{ needs.full-tests.result }}
          - API测试: ${{ needs.api-tests.result }}
          
          详细报告请查看 Actions 页面。`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });
